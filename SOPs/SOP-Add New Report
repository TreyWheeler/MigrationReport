# SOP-Add New Report

Use this SOP when you need to create a brand-new country or city report under `reports/`. If you are refreshing an existing report, follow the [SOP-Update Report](SOP-Update%20Report) instead.

## 0. Align on Purpose and Scope
1. Read `family_profile.json` to understand the household’s priorities, deal-breakers, and weighting (`evaluation_weights_0_to_5`).
2. Review `data/DATA_DICTIONARY.md` to confirm how countries, cities, categories, and keys connect.
3. Load reference data with the PowerShell helpers:
   - `pwsh scripts/powershell/Categories_GET.ps1 -AsJson`
   - `pwsh scripts/powershell/CategoryKeys_GET.ps1 -AsJson`
   - `pwsh scripts/powershell/Countries_GET.ps1 -AsJson`
   - `pwsh scripts/powershell/Cities_GET.ps1 -AsJson`
4. Identify whether you are creating a country report or a city report (with a parent `countryId`). Note the canonical `id` from the GET outputs.

## 1. Prepare Metadata Records
1. Confirm the country or city already exists in the relational tables. If not, insert it:
   - Countries: `pwsh scripts/powershell/Countries_INSERT.ps1 -Records @(@{ id = '<countryId>'; name = '<Display Name>'; report = 'reports/<file>.json' })`
   - Cities: `pwsh scripts/powershell/Cities_INSERT.ps1 -Records @(@{ id = '<cityId>'; countryId = '<countryId>'; name = '<Display Name>'; report = 'reports/<country>_<city>_report.json' })`
2. When linking a new city, double-check that the parent country already references the correct report path. Use `*_UPDATE.ps1` variants if you need to adjust existing records instead of editing JSON manually.

## 2. Create the Report Shell
1. Choose a filename that follows the established convention: `reports/<country>_report.json` for countries or `reports/<country>_<city>_report.json` for cities.
2. Seed the file with the minimal structure:
   ```json
   {
     "version": 2,
     "iso": "<two-letter code for countries or parent ISO for cities>",
     "values": []
   }
   ```
3. Mirror any additional top-level fields used in comparable reports (currently just `version`, `iso`, and `values`).

## 3. Populate Evaluation Entries
1. Build a worksheet listing every key from `data/category_keys.json`, grouped by category.
2. For each key, gather relevant evidence for the new location (policy data, cost-of-living indices, etc.).
3. Follow Sections 2–4 of the [SOP-Update Report](SOP-Update%20Report) to assign `alignmentValue` scores and craft `alignmentText` justifications for the new report. Because this is an initial creation, you will add new objects to the `values` array for every key.
4. For city reports where a key mirrors the parent country exactly, set `"sameAsParent": true` instead of duplicating text. Otherwise, include a city-specific narrative.

## 4. Validate the Result
1. Confirm the `values` array contains every key exactly once (except entries that intentionally use `sameAsParent`).
2. Run `node -e "JSON.parse(fs.readFileSync('reports/<file>.json','utf8'))"` to verify JSON validity.
3. Reread the entire report to ensure the tone is evidence-driven and aligned with the family profile and rating guides.

## 5. Finalize and Document
1. Re-run the relevant `*_GET.ps1` scripts to confirm the new report path is registered in the relational tables.
2. Review your diff to ensure only the new report file and related metadata records were added or changed.
3. Summarize the location, key evidence sources, and any data gaps in your commit message or PR description.

> After completing this SOP, maintain the report using the [SOP-Update Report](SOP-Update%20Report) whenever new data arrives or rating guides change.
