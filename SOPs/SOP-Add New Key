# SOP-Add New Key

Use this SOP to introduce a brand-new evaluation `key` across the MigrationReport dataset. Follow the steps sequentially so the new metric is captured in the relational data, documented in the rating guides, and represented in every country and city report. When you reach shared actions (like refreshing reports), follow the linked SOPs instead of reinventing the workflow.

## 0. Establish the Rationale
1. Open `family_profile.json` to confirm why the household needs this new dimension and how heavily it should influence recommendations.
2. Consult `data/DATA_DICTIONARY.md` to understand how the relational tables interact and to confirm where the new key will live.
3. Use the PowerShell GET scripts to audit existing coverage instead of manually scanning JSON:
   - `pwsh scripts/powershell/Categories_GET.ps1 -AsJson` reveals every category and ordering.
   - `pwsh scripts/powershell/CategoryKeys_GET.ps1 -AsJson` (optionally filtered with `-CategoryIds`) lists every current key and its guidance so you can validate the gap.

## 1. Define the Key Blueprint
1. Draft the exact `id` string for the new key. Keep it concise and consistent with existing naming conventions (lowercase snake case for IDs, Title Case for display names).
2. Write a one- or two-sentence guidance note that explains what evidence the key should evaluate. This text will live alongside the key inside `data/category_keys.json` and informs future writers.
3. Decide which category in `data/categories.json` should host the new key. If no category fits, design a new category entry using the same structure (`id`, `name`, optional `order`).

## 2. Update the Relational Data Files
1. If adding a new category, run `pwsh scripts/powershell/Categories_INSERT.ps1 -Records @(@{ id = '<categoryId>'; name = '<Category Name>'; order = <int> })` (omit `order` if not needed). Use the `*_UPDATE.ps1` variant when altering an existing category.
2. Insert the key via `pwsh scripts/powershell/CategoryKeys_INSERT.ps1 -Records @(@{ id = '<keyId>'; categoryId = '<categoryId>'; name = '<Display Name>'; guidance = '<author guidance>' })`. Use the update script if you need to revise any fields after insertion.
3. Rerun the GET scripts with `-AsJson` to confirm the new entries persisted exactly as intended.

## 3. Author the Rating Guide
1. Follow the [SOP-Update Rating Guide](SOP-Update%20Rating%20Guide) but treat the entry as a net-new block inside `data/rating_guides.json`.
2. Ensure the 1â€“10 descriptions clearly delineate what qualifies for each score and align with the narrative you drafted in Step 1.
3. Validate JSON syntax before moving on (`node -e "JSON.parse(fs.readFileSync('data/rating_guides.json','utf8'))"`).

## 4. Plan the Report Rollout
1. Create a temporary worksheet (outside the repo) that lists every country and city report file path. Use `pwsh scripts/powershell/Countries_GET.ps1 -AsJson` and `pwsh scripts/powershell/Cities_GET.ps1 -AsJson` to export the authoritative IDs and report locations.
2. For each location, note any preliminary research or sources required to evaluate the new key accurately. If data is scarce, plan how you will justify a `0` (insufficient data) vs. a cautious numeric score.

## 5. Update Every Report
1. Iterate through each `reports/*.json` file (countries and cities) and follow the [SOP-Update Report](SOP-Update%20Report) with two additions:
   - When the key does not yet exist in the `values` array, create a new object with `key`, `alignmentValue`, and `alignmentText` fields.
   - Ensure the new entry respects any city `sameAsParent` inheritance rules (add `"sameAsParent": true` when the city fully mirrors the country).
2. Verify that every report now contains the key exactly once and that the narrative reflects the rating-guide language created in Step 3.

## 6. Quality Control Pass
1. Run a JSON syntax check (e.g., `node -e "JSON.parse(fs.readFileSync('<file>','utf8'))"`) on all modified files.
2. Spot-check a mix of country and city entries to confirm tone, evidence, and scoring consistency.
3. Re-read the rating-guide entry to ensure it still supports the values you assigned. Adjust wording if ambiguity remains (and re-run validation if you edit the guide again).

## 7. Finalize Metadata
1. Update any documentation (including this SOP) if the key introduces follow-on workflows or dependencies.
2. Summarize the new key, notable scoring patterns, and any research gaps in your commit message or PR description so reviewers can audit quickly.

> **Accuracy mandate:** Every `alignmentValue` and `alignmentText` must stay synchronized with the rating guide and family priorities. If you are unsure, choose a conservative score, mark it for follow-up, and never guess.
