# SOP-Add New Key

This SOP walks LLM agents through introducing a brand-new evaluation `Key` across the MigrationReport dataset. Follow every step in order so the new metric lands in the relational data files under `data/`, `rating_guides.json`, and every country and city report with perfectly aligned scoring text.

## 0. Establish the Rationale
1. Open `family_profile.json` to confirm why the household needs this new dimension and how heavily it should influence recommendations.
2. Consult `DATA_DICTIONARY.md` to understand how the relational tables interact and to confirm where the new key will live.
3. Use the PowerShell GET scripts to audit existing coverage instead of manually scanning JSON:
   - `pwsh scripts/powershell/Categories_GET.ps1 -AsJson` reveals every category and ordering.
   - `pwsh scripts/powershell/CategoryKeys_GET.ps1 -AsJson` (optionally filtered with `-CategoryIds`) lists every current key and its guidance so you can validate the gap.

## 1. Define the Key Blueprint
1. Draft the exact `Key` string you will add. Keep it concise and consistent with existing naming conventions (Title Case, no trailing punctuation unless required).
2. Write a one- or two-sentence guidance note that explains what evidence the key should evaluate. This text will live alongside the key inside `data/category_keys.json` and informs future writers.
3. Decide which Category in `data/categories.json` should host the new key. If no category fits, design a new Category entry using the same structure (`id`, `name`, optional `order`).

## 2. Update the Relational Data Files
1. If adding a new Category, call `pwsh scripts/powershell/Categories_INSERT.ps1 -Records @(@{ id = '<categoryId>'; name = '<Category Name>'; order = <int> })` (omit `order` if not needed). Use the `*_UPDATE.ps1` variant when altering an existing category.
2. Add the key via `pwsh scripts/powershell/CategoryKeys_INSERT.ps1 -Records @(@{ id = '<keyId>'; categoryId = '<categoryId>'; name = '<Key Name>'; guidance = '<Author guidance>' })`. The update script is available for revisions.
3. Rerun the GET scripts with `-AsJson` to confirm the new entries persisted exactly as intended.

## 3. Expand the Rating Guide
1. Open `rating_guides.json` and add a new top-level object for the key. Mirror the format used by existing entries: `"Key"`, optional `"Considerations"`, and a `"Ratings"` array with 1–10 descriptions.
2. Craft each rating description so an agent can unambiguously map real-world evidence to a score. Highlight deal-breakers from the family profile and call out what constitutes a perfect 10 vs. a 5.
3. Proofread for internal consistency—scores must escalate logically and avoid contradictions. Accurate guidance here is essential for keeping `alignmentValue` and `alignmentText` trustworthy.

## 4. Seed a Master Alignment Reference
1. Create a temporary worksheet (outside the repo) that lists every country and city report file path. Use `pwsh scripts/powershell/Countries_GET.ps1 -AsJson` and `pwsh scripts/powershell/Cities_GET.ps1 -AsJson` to export the authoritative IDs and report locations.
2. For each location, note any preliminary research or sources required to evaluate the new key accurately. If data is scarce, plan how you will justify a `0` (insufficient data) vs. a cautious numeric score.

## 5. Iterate Through Every Report
For each `reports/*.json` file (countries and nested cities):

1. Load the file and ensure a `version` field exists. If not, add `"version": 2` at the top to signal the refresh.
2. Append a new object inside the `values` array with the following fields:
   - `"key"`: the exact key string from `data/category_keys.json`.
   - `"alignmentValue"`: an integer 0–10 chosen using the new rating guide. Use `0` only when evidence is unavailable; never leave `-1` in final output.
   - `"alignmentText"`: 1–2 sentences that cite concrete facts and reference the family’s priorities. The text must explicitly justify the numeric score per the rating guide.
3. If the report already contains a placeholder for this key, replace it rather than appending a duplicate. Maintain the original ordering logic when possible.
4. Validate that the alignment text mirrors the selected rating tier. If the narrative does not match the number, revise before moving on.

## 6. Quality Control Pass
1. After updating every report, run a JSON syntax check (e.g., `node -e "JSON.parse(fs.readFileSync('<file>','utf8'))"`) on the modified files.
2. Spot-check a sample of country and city entries to confirm the new key appears exactly once and the tone is consistent.
3. Re-read the rating guide entry to ensure it still supports the values you assigned. Adjust wording if ambiguity remains.

## 7. Finalize Metadata
1. Update any documentation (including this SOP) if the key triggers follow-on workflows or dependencies.
2. Summarize the new key, notable scoring patterns, and any research gaps in your commit message or PR description so reviewers can audit quickly.

> **Accuracy mandate:** Every `alignmentValue` and `alignmentText` must stay perfectly synchronized with the rating guide and family priorities. If you are unsure, choose a conservative score, mark it for follow-up, and never guess.
